name: CI Pipeline

on:
  push:
    branches: [main, develop, 'feature/**', 'fix/**', '001-help-desk-core']
  pull_request:
    branches: [main, develop]

# Cancel in-progress runs when a new one is started
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  DOTNET_VERSION: '9.0.x'

# Default permissions for all jobs (least privilege)
permissions:
  contents: read

jobs:
  # Install and cache dependencies
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Cache npm dependencies
        id: cache-npm
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install npm dependencies
        if: steps.cache-npm.outputs.cache-hit != 'true'
        run: npm ci
      
      - name: Cache .NET dependencies
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      
      - name: Restore .NET dependencies
        run: dotnet restore apps/api/Hickory.Api.csproj

  # Lint and format checks
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Restore npm cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      
      - name: Restore .NET cache
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
      
      - name: Restore .NET dependencies
        run: dotnet restore apps/api/Hickory.Api.csproj
      
      - name: Lint Web
        run: npx nx lint web
      
      - name: Lint CLI
        run: npx nx lint cli
      
      - name: Check .NET formatting
        run: dotnet format apps/api/Hickory.Api.csproj --verify-no-changes --no-restore
        continue-on-error: true

  # Build jobs
  build-api:
    name: Build .NET API
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Restore .NET cache
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
      
      - name: Restore .NET dependencies
        run: |
          dotnet restore apps/api/Hickory.Api.csproj
          dotnet restore apps/api/Hickory.Api.Tests/Hickory.Api.Tests.csproj
          dotnet restore apps/api/Hickory.Api.IntegrationTests/Hickory.Api.IntegrationTests.csproj
      
      - name: Build API
        run: dotnet build apps/api/Hickory.Api.csproj --configuration Release --no-restore
      
      - name: Build API Tests
        run: dotnet build apps/api/Hickory.Api.Tests/Hickory.Api.Tests.csproj --configuration Release --no-restore
      
      - name: Build API Integration Tests
        run: dotnet build apps/api/Hickory.Api.IntegrationTests/Hickory.Api.IntegrationTests.csproj --configuration Release --no-restore
      
      - name: Upload API Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: api-build
          path: |
            apps/api/bin/Release/
            apps/api/Hickory.Api.Tests/bin/Release/
            apps/api/Hickory.Api.IntegrationTests/bin/Release/
          retention-days: 1

  build-web:
    name: Build Web App
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Restore npm cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      
      - name: Build Web
        run: npx nx build web
      
      - name: Upload Web Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: apps/web/.next/
          retention-days: 1

  build-cli:
    name: Build CLI
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Restore npm cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      
      - name: Build CLI
        run: npx nx build cli

  # Unit tests
  test-api-unit:
    name: API Unit Tests
    runs-on: ubuntu-latest
    needs: build-api
    permissions:
      contents: read
      checks: write  # Required for test reporter
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Download API Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: api-build
          path: apps/api/
      
      - name: Run API Unit Tests
        run: dotnet test apps/api/Hickory.Api.Tests/Hickory.Api.Tests.csproj --no-build --configuration Release --logger "trx;LogFileName=test-results.trx" --collect:"XPlat Code Coverage" --results-directory ./coverage
      
      - name: Publish Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: .NET API Unit Test Results
          path: '**/test-results.trx'
          reporter: dotnet-trx
          fail-on-error: true
      
      - name: Upload Coverage Reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          directory: ./coverage
          flags: api-unit
          name: api-unit-coverage
          fail_ci_if_error: false

  test-api-integration:
    name: API Integration Tests
    runs-on: ubuntu-latest
    needs: build-api
    permissions:
      contents: read
      checks: write  # Required for test reporter
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Download API Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: api-build
          path: apps/api/
      
      - name: Run API Integration Tests
        run: dotnet test apps/api/Hickory.Api.IntegrationTests/Hickory.Api.IntegrationTests.csproj --no-build --configuration Release --logger "trx;LogFileName=integration-test-results.trx" --collect:"XPlat Code Coverage" --results-directory ./coverage
      
      - name: Publish Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: .NET API Integration Test Results
          path: '**/integration-test-results.trx'
          reporter: dotnet-trx
          fail-on-error: true
      
      - name: Upload Coverage Reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          directory: ./coverage
          flags: api-integration
          name: api-integration-coverage
          fail_ci_if_error: false

  test-web:
    name: Web Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Restore npm cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      
      - name: Run Web Unit Tests
        run: npx nx test web --coverage --ci
      
      - name: Upload Coverage Reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          directory: ./coverage/apps/web
          flags: web
          name: web-coverage
          fail_ci_if_error: false

  test-cli:
    name: CLI Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Restore npm cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      
      - name: Run CLI Unit Tests
        run: npx nx test cli --ci

  # E2E Tests
  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [build-api, build-web]
    timeout-minutes: 15
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: hickory
          POSTGRES_USER: hickory
          POSTGRES_PASSWORD: hickory_dev_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Restore npm cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      
      - name: Download API Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: api-build
          path: apps/api/
      
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium
      
      - name: Run Database Migrations
        run: |
          dotnet tool install --global dotnet-ef || true
          dotnet ef database update --project apps/api/Hickory.Api.csproj --no-build --configuration Release
        env:
          ASPNETCORE_ENVIRONMENT: Development
      
      - name: Start API (Background)
        run: |
          dotnet apps/api/bin/Release/net9.0/Hickory.Api.dll &
          echo $! > api.pid
        env:
          ASPNETCORE_ENVIRONMENT: Development
      
      - name: Wait for API
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:5000/health 2>/dev/null; do sleep 2; done' || exit 1
      
      - name: Run E2E Tests
        run: npx nx e2e web-e2e
        env:
          CI: true
      
      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: apps/web-e2e/playwright-report/
          retention-days: 7
      
      - name: Stop API
        if: always()
        run: |
          if [ -f api.pid ]; then
            kill $(cat api.pid) || true
          fi

  # Docker Build Validation
  docker:
    name: Docker Build (${{ matrix.service }})
    runs-on: ubuntu-latest
    needs: [build-api, build-web]
    
    strategy:
      matrix:
        service: [api, web]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/${{ matrix.service }}.Dockerfile
          push: false
          tags: hickory-${{ matrix.service }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write  # Required for uploading SARIF results
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Overall status check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [lint, test-api-unit, test-api-integration, test-web, test-cli, test-e2e, docker, security]
    if: always()
    
    steps:
      - name: Check job status
        run: |
          if [[ "${{ needs.lint.result }}" != "success" ]] || \
             [[ "${{ needs.test-api-unit.result }}" != "success" ]] || \
             [[ "${{ needs.test-api-integration.result }}" != "success" ]] || \
             [[ "${{ needs.test-web.result }}" != "success" ]] || \
             [[ "${{ needs.test-cli.result }}" != "success" ]] || \
             [[ "${{ needs.test-e2e.result }}" != "success" ]] || \
             [[ "${{ needs.docker.result }}" != "success" ]] || \
             [[ "${{ needs.security.result }}" != "success" ]]; then
            echo "❌ One or more CI jobs failed"
            exit 1
          fi
          echo "✅ All CI jobs passed successfully"
