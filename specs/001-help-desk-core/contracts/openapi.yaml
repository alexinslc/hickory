openapi: 3.0.3
info:
  title: Hickory Help Desk API
  description: |
    Modern, minimal, and fast open-source help desk API for IT/DevOps/Software teams.
    
    ## Authentication
    
    The API supports two authentication modes:
    - **OAuth 2.0 / OIDC**: For SSO integration (Authorization header with Bearer token)
    - **Local Email/Password**: Username/password authentication with JWT tokens
    
    ## Rate Limiting
    
    - 1000 requests per minute per user for authenticated requests
    - 100 requests per minute for unauthenticated requests
    
    ## Versioning
    
    API version is specified in the URL path: `/api/v1/...`
  version: 1.0.0
  contact:
    name: Hickory Help Desk
    url: https://github.com/alexinslc/hickory
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:5000/api/v1
    description: Local development
  - url: https://api.hickory.example.com/api/v1
    description: Production (example)

tags:
  - name: Authentication
    description: User authentication and registration
  - name: Tickets
    description: Ticket CRUD operations
  - name: Comments
    description: Ticket comments and replies
  - name: Attachments
    description: File uploads and downloads
  - name: Categories
    description: Ticket categories management
  - name: Tags
    description: Ticket tags management
  - name: Users
    description: User management
  - name: Search
    description: Full-text search across tickets
  - name: Reports
    description: Analytics and reporting (P3 feature)

security:
  - BearerAuth: []

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login with email/password
      description: Authenticate using local credentials and receive JWT token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user account
      description: Create a new user account with email/password
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Email already registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh JWT token
      description: Get a new JWT token using refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /tickets:
    get:
      tags:
        - Tickets
      summary: List tickets
      description: Get paginated list of tickets visible to current user
      parameters:
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/PageSize'
        - name: status
          in: query
          description: Filter by ticket status
          schema:
            $ref: '#/components/schemas/TicketStatus'
        - name: priority
          in: query
          description: Filter by ticket priority
          schema:
            $ref: '#/components/schemas/TicketPriority'
        - name: categoryId
          in: query
          description: Filter by category ID
          schema:
            type: string
            format: uuid
        - name: assigneeId
          in: query
          description: Filter by assignee ID
          schema:
            type: string
            format: uuid
        - name: submitterId
          in: query
          description: Filter by submitter ID
          schema:
            type: string
            format: uuid
        - name: sortBy
          in: query
          description: Sort field
          schema:
            type: string
            enum: [createdAt, updatedAt, priority, status]
            default: createdAt
        - name: sortDirection
          in: query
          description: Sort direction
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Tickets retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedTicketResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    
    post:
      tags:
        - Tickets
      summary: Create a new ticket
      description: Submit a new support ticket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTicketRequest'
      responses:
        '201':
          description: Ticket created successfully
          headers:
            Location:
              description: URL of created ticket
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /tickets/{ticketId}:
    get:
      tags:
        - Tickets
      summary: Get ticket by ID
      description: Retrieve detailed ticket information
      parameters:
        - $ref: '#/components/parameters/TicketId'
      responses:
        '200':
          description: Ticket retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketDetailResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    
    put:
      tags:
        - Tickets
      summary: Update ticket
      description: Update ticket fields (agent/admin only for some fields)
      parameters:
        - $ref: '#/components/parameters/TicketId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTicketRequest'
      responses:
        '200':
          description: Ticket updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
    
    delete:
      tags:
        - Tickets
      summary: Delete ticket (soft delete)
      description: Mark ticket as deleted (admin only)
      parameters:
        - $ref: '#/components/parameters/TicketId'
      responses:
        '204':
          description: Ticket deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /tickets/{ticketId}/comments:
    get:
      tags:
        - Comments
      summary: Get ticket comments
      description: Retrieve all comments for a ticket (internal comments filtered for end users)
      parameters:
        - $ref: '#/components/parameters/TicketId'
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/PageSize'
      responses:
        '200':
          description: Comments retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedCommentResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    
    post:
      tags:
        - Comments
      summary: Add comment to ticket
      description: Add a reply or internal note to a ticket
      parameters:
        - $ref: '#/components/parameters/TicketId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
      responses:
        '201':
          description: Comment added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /tickets/{ticketId}/attachments:
    get:
      tags:
        - Attachments
      summary: List ticket attachments
      description: Get all attachments for a ticket
      parameters:
        - $ref: '#/components/parameters/TicketId'
      responses:
        '200':
          description: Attachments retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttachmentResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    
    post:
      tags:
        - Attachments
      summary: Upload attachment to ticket
      description: Upload a file attachment (max 10MB)
      parameters:
        - $ref: '#/components/parameters/TicketId'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '201':
          description: Attachment uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '413':
          description: File too large (max 10MB)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

  /attachments/{attachmentId}:
    get:
      tags:
        - Attachments
      summary: Download attachment
      description: Download attachment file
      parameters:
        - name: attachmentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Attachment downloaded successfully
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /categories:
    get:
      tags:
        - Categories
      summary: List categories
      description: Get all active ticket categories
      responses:
        '200':
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
    
    post:
      tags:
        - Categories
      summary: Create category
      description: Create a new ticket category (admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryRequest'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /tags:
    get:
      tags:
        - Tags
      summary: List tags
      description: Get all tags (with optional search)
      parameters:
        - name: search
          in: query
          description: Search tags by name
          schema:
            type: string
      responses:
        '200':
          description: Tags retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TagResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /search:
    get:
      tags:
        - Search
      summary: Search tickets
      description: Full-text search across ticket titles and descriptions
      parameters:
        - name: q
          in: query
          required: true
          description: Search query
          schema:
            type: string
            minLength: 2
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/PageSize'
      responses:
        '200':
          description: Search results retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedTicketResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /users/me:
    get:
      tags:
        - Users
      summary: Get current user profile
      description: Retrieve authenticated user's profile information
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from /auth/login or /auth/refresh

  parameters:
    TicketId:
      name: ticketId
      in: path
      required: true
      description: Ticket unique identifier
      schema:
        type: string
        format: uuid
    
    PageNumber:
      name: page
      in: query
      description: Page number (1-indexed)
      schema:
        type: integer
        minimum: 1
        default: 1
    
    PageSize:
      name: pageSize
      in: query
      description: Items per page
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

  schemas:
    # Authentication Schemas
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          maxLength: 256
        password:
          type: string
          format: password
          minLength: 8
    
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
          maxLength: 256
        password:
          type: string
          format: password
          minLength: 8
        firstName:
          type: string
          minLength: 1
          maxLength: 100
        lastName:
          type: string
          minLength: 1
          maxLength: 100
    
    LoginResponse:
      type: object
      required:
        - accessToken
        - refreshToken
        - expiresIn
        - user
      properties:
        accessToken:
          type: string
          description: JWT access token
        refreshToken:
          type: string
          description: Refresh token for obtaining new access tokens
        expiresIn:
          type: integer
          description: Access token expiration time in seconds
        user:
          $ref: '#/components/schemas/UserResponse'
    
    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string

    # Ticket Schemas
    CreateTicketRequest:
      type: object
      required:
        - title
        - description
        - priority
      properties:
        title:
          type: string
          minLength: 5
          maxLength: 200
        description:
          type: string
          minLength: 10
          maxLength: 10000
        priority:
          $ref: '#/components/schemas/TicketPriority'
        categoryId:
          type: string
          format: uuid
          nullable: true
    
    UpdateTicketRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 5
          maxLength: 200
        description:
          type: string
          minLength: 10
          maxLength: 10000
        status:
          $ref: '#/components/schemas/TicketStatus'
        priority:
          $ref: '#/components/schemas/TicketPriority'
        assigneeId:
          type: string
          format: uuid
          nullable: true
        categoryId:
          type: string
          format: uuid
          nullable: true
        resolution:
          type: string
          maxLength: 10000
          nullable: true
        rowVersion:
          type: string
          format: byte
          description: Optimistic concurrency token
    
    TicketResponse:
      type: object
      required:
        - id
        - ticketNumber
        - title
        - description
        - status
        - priority
        - submitter
        - createdAt
        - updatedAt
        - rowVersion
      properties:
        id:
          type: string
          format: uuid
        ticketNumber:
          type: string
          example: "TKT-00001"
        title:
          type: string
        description:
          type: string
        status:
          $ref: '#/components/schemas/TicketStatus'
        priority:
          $ref: '#/components/schemas/TicketPriority'
        submitter:
          $ref: '#/components/schemas/UserSummary'
        assignee:
          $ref: '#/components/schemas/UserSummary'
          nullable: true
        category:
          $ref: '#/components/schemas/CategoryResponse'
          nullable: true
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagResponse'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        resolvedAt:
          type: string
          format: date-time
          nullable: true
        closedAt:
          type: string
          format: date-time
          nullable: true
        resolution:
          type: string
          nullable: true
        rowVersion:
          type: string
          format: byte
    
    TicketDetailResponse:
      allOf:
        - $ref: '#/components/schemas/TicketResponse'
        - type: object
          properties:
            comments:
              type: array
              items:
                $ref: '#/components/schemas/CommentResponse'
            attachments:
              type: array
              items:
                $ref: '#/components/schemas/AttachmentResponse'
    
    PagedTicketResponse:
      type: object
      required:
        - items
        - page
        - pageSize
        - totalCount
        - totalPages
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/TicketResponse'
        page:
          type: integer
        pageSize:
          type: integer
        totalCount:
          type: integer
        totalPages:
          type: integer
    
    TicketStatus:
      type: string
      enum:
        - New
        - Open
        - InProgress
        - Resolved
        - Closed
        - Reopened
    
    TicketPriority:
      type: string
      enum:
        - Low
        - Normal
        - High
        - Critical

    # Comment Schemas
    CreateCommentRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          minLength: 1
          maxLength: 10000
        isInternal:
          type: boolean
          default: false
          description: Whether comment is internal (agent/admin only)
    
    CommentResponse:
      type: object
      required:
        - id
        - ticketId
        - author
        - content
        - isInternal
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        ticketId:
          type: string
          format: uuid
        author:
          $ref: '#/components/schemas/UserSummary'
        content:
          type: string
        isInternal:
          type: boolean
        createdAt:
          type: string
          format: date-time
    
    PagedCommentResponse:
      type: object
      required:
        - items
        - page
        - pageSize
        - totalCount
        - totalPages
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CommentResponse'
        page:
          type: integer
        pageSize:
          type: integer
        totalCount:
          type: integer
        totalPages:
          type: integer

    # Attachment Schemas
    AttachmentResponse:
      type: object
      required:
        - id
        - fileName
        - contentType
        - sizeBytes
        - createdAt
        - downloadUrl
      properties:
        id:
          type: string
          format: uuid
        fileName:
          type: string
        contentType:
          type: string
        sizeBytes:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        downloadUrl:
          type: string
          format: uri

    # Category Schemas
    CreateCategoryRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
        description:
          type: string
          maxLength: 500
          nullable: true
        color:
          type: string
          pattern: '^#[0-9A-Fa-f]{6}$'
          nullable: true
    
    CategoryResponse:
      type: object
      required:
        - id
        - name
        - isActive
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
          nullable: true
        color:
          type: string
          nullable: true
        isActive:
          type: boolean

    # Tag Schemas
    TagResponse:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        color:
          type: string
          nullable: true

    # User Schemas
    UserResponse:
      type: object
      required:
        - id
        - email
        - firstName
        - lastName
        - role
        - isActive
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        role:
          $ref: '#/components/schemas/UserRole'
        isActive:
          type: boolean
    
    UserSummary:
      type: object
      required:
        - id
        - firstName
        - lastName
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
    
    UserRole:
      type: string
      enum:
        - EndUser
        - Agent
        - Administrator

    # Error Schemas
    ProblemDetails:
      type: object
      required:
        - type
        - title
        - status
      properties:
        type:
          type: string
          format: uri
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
        instance:
          type: string
          format: uri
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string

  responses:
    BadRequest:
      description: Bad request - validation errors
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    
    Unauthorized:
      description: Unauthorized - authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    
    Forbidden:
      description: Forbidden - insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    
    Conflict:
      description: Conflict - optimistic concurrency violation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          example:
            type: "https://tools.ietf.org/html/rfc7231#section-6.5.8"
            title: "Concurrency Conflict"
            status: 409
            detail: "The ticket was modified by another user. Please refresh and try again."
